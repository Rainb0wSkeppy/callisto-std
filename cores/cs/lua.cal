inline man unsafe __lua_pop_a cell v begin asm
	"dsp = dsp - 1;"
	"regA = mem[dsp];"
end end

inline man unsafe __lua_pop_b cell v begin asm
	"dsp = dsp - 1;"
	"regB = mem[dsp];"
end end

inline man unsafe __lua_push_a -> cell v begin asm
	"mem[dsp] = regA;"
	"dsp = dsp + 1;"
end end

inline man unsafe __lua_push_b -> cell v begin asm
	"mem[dsp] = regB;"
	"dsp = dsp + 1;"
end end

func man unsafe = cell a cell b -> cell res begin
	__lua_pop_b
	__lua_pop_a
	asm
		"if regA == regB then"
		"    mem[dsp] = -1"
		"    dsp = dsp + 1"
		"else"
		"    mem[dsp] = 0"
		"    dsp = dsp + 1"
		"end"
	end
end

func man unsafe > cell a cell b -> cell res begin
	__lua_pop_b
	__lua_pop_a
	asm
		"if regA > regB then"
		"    mem[dsp] = -1"
		"    dsp = dsp + 1"
		"else"
		"    mem[dsp] = 0"
		"    dsp = dsp + 1"
		"end"
	end
end

func man unsafe >= cell a cell b -> cell res begin
	__lua_pop_b
	__lua_pop_a
	asm
		"if regA >= regB then"
		"    mem[dsp] = -1"
		"    dsp = dsp + 1"
		"else"
		"    mem[dsp] = 0"
		"    dsp = dsp + 1"
		"end"
	end
end

func man unsafe < cell a cell b -> cell res begin
	__lua_pop_b
	__lua_pop_a
	asm
		"if regA < regB then"
		"    mem[dsp] = -1"
		"    dsp = dsp + 1"
		"else"
		"    mem[dsp] = 0"
		"    dsp = dsp + 1"
		"end"
	end
end

func man unsafe <= cell a cell b -> cell res begin
	__lua_pop_b
	__lua_pop_a
	asm
		"if regA <= regB then"
		"    mem[dsp] = -1"
		"    dsp = dsp + 1"
		"else"
		"    mem[dsp] = 0"
		"    dsp = dsp + 1"
		"end"
	end
end

func man unsafe @ addr address -> cell value begin
	__lua_pop_a
	asm
		"regA = mem[regA]"
	end
	__lua_push_a
end

func man unsafe ! cell value addr address begin
	__lua_pop_b
	__lua_pop_a
	asm
		"mem[regB] = regA"
	end
end

func man unsafe dup cell v -> cell v cell v begin
	__lua_pop_a
	__lua_push_a
	__lua_push_a
end

func man unsafe drop cell v begin asm
	"dsp = dsp - 1"
end end

func man unsafe swap cell a cell b -> cell b cell a begin
	__lua_pop_a
	__lua_pop_b
	__lua_push_a
	__lua_push_b
end

func man unsafe + cell a cell b -> cell res begin
	__lua_pop_b
	__lua_pop_a
	asm
		"regA = regA + regB"
	end
	__lua_push_a
end

inline man unsafe s+ cell a cell b -> cell res begin + end

func man unsafe - cell a cell b -> cell res begin
	__lua_pop_b
	__lua_pop_a
	asm
		"regA = regA - regB"
	end
	__lua_push_a
end

inline man unsafe s- cell a cell b -> cell res begin - end

func man unsafe * cell a cell b -> cell res begin
	__lua_pop_b
	__lua_pop_a
	asm
		"regA = regA * regB"
	end
	__lua_push_a
end

inline man unsafe s* cell a cell b -> cell res begin * end

func man unsafe / cell a cell b -> cell res begin
	__lua_pop_b
	__lua_pop_a
	asm
		"regA = regA // regB"
	end
	__lua_push_a
end

inline man unsafe s/ cell a cell b -> cell res begin / end

func man unsafe % cell a cell b -> cell res begin
	__lua_pop_b
	__lua_pop_a
	asm
		"regA = regA % regB"
	end
	__lua_push_a
end

inline man unsafe s% cell a cell b -> cell res begin % end

func man unsafe and cell a cell b -> cell res begin
	__lua_pop_b
	__lua_pop_a
	asm
		"regA = regA & regB"
	end
	__lua_push_a
end

func man unsafe or cell a cell b -> cell res begin
	__lua_pop_b
	__lua_pop_a
	asm
		"regA = regA | regB"
	end
	__lua_push_a
end

func man unsafe xor cell a cell b -> cell res begin
	__lua_pop_b
	__lua_pop_a
	asm
		"regA = regA ~ regB"
	end
	__lua_push_a
end

func man unsafe not cell v -> cell !v begin
	__lua_pop_a
	asm
		"regA = ~regA"
	end
	__lua_push_a
end

func man unsafe << cell v cell by -> cell res begin
	__lua_pop_b
	__lua_pop_a
	asm
		"regA = regA << regB"
	end
	__lua_push_a
end

func man unsafe >> cell v cell by -> cell res begin
	__lua_pop_b
	__lua_pop_a
	asm
		"regA = regA >> regB"
	end
	__lua_push_a
end

version IO
	func man unsafe printch cell ch begin
		__lua_pop_a
		asm
			"io.write(string.char(regA));"
		end
	end
end

version Exit
	func man unsafe exit cell code begin asm
		"os.exit()"
	end end
end

version Time
	func man unsafe get_epoch_time -> cell time begin
		asm
			"regA = os.time(os.date('!*t'))"
		end

		__lua_push_a
	end
end
