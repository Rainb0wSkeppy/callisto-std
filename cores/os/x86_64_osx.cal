let addr __osx_argv
let cell __osx_argc

inline __x86_64_program_init begin asm
	"mov [__global___us____us__osx__us__argc], edi"
	"mov [__global___us____us__osx__us__argv], rsi"
end end

inline __x86_64_program_exit begin asm
	"mov rax, 0x2000001"
	"mov rdi, 0"
	"syscall"
end end

version IO
	func printch begin asm
		"sub r15, 8"
		"mov rax, 0x2000004"
		"mov rdi, 1"
		"mov rsi, r15"
		"mov rdx, 1"
		"syscall"
	end end
end

version Args
	func core_get_arg begin
		8 * __osx_argv + @
	end

	inline core_get_arg_length begin __osx_argc end
end

version Exit
	func exit begin
		__x86_64_pop_rdi
		asm
			"mov rax, 0x2000001"
			"syscall"
		end
	end
end

version IO version Exit
	func __core_a@ cell offset addr arr begin
		arr Array.memberSize + @ offset * -> offset
		arr Array.elements + @ offset +

		version CallistoScript
			if arr Array.memberSize + @ 1 = then
				@
			else
				return # TODO!!!
			end
		end

		version not CallistoScript
			if arr Array.memberSize + @ 1 = then
				b@
			elseif arr Array.memberSize + @ 2 = then
				version 16Bit
					w@
				end
				version not 16Bit
					# TODO!!!
				end
			elseif arr Array.memberSize + @ 4 = then
				version 32Bit
					d@
				end
				version not 32Bit
					# TODO!!!
				end
			else
				@
			end
		end
	end

	func __core_printstr addr arr begin
		let usize length
		let usize i

		arr @ -> length

		while i length < do
			i arr __core_a@ printch
			i 1 + -> i
		end
	end

	func __x86_64_exception begin
		exception_msg c"Unhandled exception: %s" printf new_line
		1 exit
	end
end end
