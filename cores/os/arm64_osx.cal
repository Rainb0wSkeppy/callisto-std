let addr __osx_argv
let cell __osx_argc

inline __arm64_program_init begin asm
	"adrp x9, __global___us____us__osx__us__argc@PAGE"
	"add x9, x9, __global___us____us__osx__us__argc@PAGEOFF"
	"str x0, [x9]"
	"adrp x9, __global___us____us__osx__us__argv@PAGE"
	"add x9, x9, __global___us____us__osx__us__argv@PAGEOFF"
	"str x1, [x9]"
end end

inline __arm64_program_exit begin asm
	"mov x16, 1"
	"mov x0, 0"
	"svc #80"
end end

version IO
	func printch begin asm
		"sub x19, x19, #8"
		"mov x16, 4"
		"mov x0, 1"
		"mov x1, x19"
		"mov x2, 1"
		"svc #80"
	end end
end

version File
	const FILE_READ  1
	const FILE_WRITE 2

	const SEEK_SET   0
	const SEEK_CUR   1
	const SEEK_END   2

	const __osx_O_RDONLY 0
	const __osx_O_WRONLY 1
	const __osx_O_RDWR   2
	const __osx_O_CREAT  0x200

	const __osx_default_mode 0o666

	struct File
		cell fd
	end

	let File stdin
	let File stdout
	let File stderr
	0 &stdin !
	1 &stdout !
	2 &stderr !

	func open_file begin
		let addr path
		let cell mode
		-> mode
		-> path

		let array 4096 u8 pathBuf

		path Array.elements + @
		&pathBuf
		path @
		__arm64_memcpy

		let cell flags

		if FILE_READ FILE_WRITE or mode = then
			__osx_O_RDWR __osx_O_CREAT or -> flags
		elseif FILE_READ mode = then
			__osx_O_RDONLY -> flags
		elseif FILE_WRITE mode = then
			__osx_O_WRONLY __osx_O_CREAT or -> flags
		end

		&pathBuf
		flags
		__osx_default_mode

		__arm64_pop_x2
		__arm64_pop_x1
		__arm64_pop_x0
		asm
			"mov x16, #5" # open syscall
			"svc #80"
		end
		__arm64_push_x0
	end

	func close_file begin
		@ __arm64_pop_x0 # FD
		asm
			"mov x16, #6" # Close
			"svc #80"
		end
	end

	func file< begin
		!
	end

	func file@ begin
		__arm64_pop_x2   # Length
		__arm64_pop_x1   # Buffer
		@ __arm64_pop_x0 # Fd

		asm
			"mov x16, #3" # read
			"svc #80"
		end
	end

	func file! begin
		__arm64_pop_x2   # Length
		__arm64_pop_x1   # Buffer
		@ __arm64_pop_x0 # Fd

		asm
			"mov x16, #4" # write
			"svc #80"
		end

		__arm64_push_x0
	end

	func file_seek begin
		__arm64_pop_x2   # Whence
		__arm64_pop_x1   # Offset
		@ __arm64_pop_x0 # Fd

		asm
			"mov x16, #199" # lseek
			"svc #80"
		end
	end

	func file_peek begin
		@ __arm64_pop_x0
		asm
			"mov x1, #0"
			"mov x2, #1" # SEEK_CUR
			"mov x16, #199" # lseek
			"svc #80"
		end
		__arm64_push_x0
	end
end

version Args
	func core_get_arg begin
		8 * __osx_argv + @
	end

	inline core_get_arg_length begin __osx_argc end
end

version Time
	struct __osx_timeval
		cell sec
		cell usec
	end

	func get_epoch_time begin
		let __osx_timeval tv
		&tv
		__arm64_pop_x0
		asm
			"mov x16, #116" # gettimeofday
			"mov x1, #0"
			"svc #80"
		end
		&tv @
	end
end

version Heap
	extern C addr malloc usize end
	extern C addr realloc addr usize end
	extern C void free addr end
end

version Exit
	func exit begin
		__arm64_pop_x0
		asm
			"mov x16, 1"
			"svc #80"
		end
	end
end

version IO version Exit
	func __core_a@ cell offset addr arr begin
		arr Array.memberSize + @ offset * -> offset
		arr Array.elements + @ offset +

		version CallistoScript
			if arr Array.memberSize + @ 1 = then
				@
			else
				return # TODO!!!
			end
		end

		version not CallistoScript
			if arr Array.memberSize + @ 1 = then
				b@
			elseif arr Array.memberSize + @ 2 = then
				version 16Bit
					w@
				end
				version not 16Bit
					# TODO!!!
				end
			elseif arr Array.memberSize + @ 4 = then
				version 32Bit
					d@
				end
				version not 32Bit
					# TODO!!!
				end
			else
				@
			end
		end
	end

	func __core_printstr addr arr begin
		let usize length
		let usize i

		arr @ -> length

		while i length < do
			i arr __core_a@ printch
			i 1 + -> i
		end
	end

	func __arm64_exception begin
		&_cal_exception Exception.msg + c"Unhandled exception: %s" printf new_line
		1 exit
	end
end end
