let addr __linux_argv
let cell __linux_argc

inline __arm64_program_init begin asm
	"add x9, sp, #8"
	"ldr x10, =__global___us____us__linux__us__argv"
	"str x9, [x10]"
	"ldr x9, [sp]"
	"ldr x10, =__global___us____us__linux__us__argc"
	"str x9, [x10]"
end end

inline __arm64_program_exit begin asm
	"mov x8, #93"
	"mov x0, #0"
	"svc #0"
end end

version IO
	func printch begin asm
		"sub x19, x19, #8"
		"mov x8, #64"
		"mov x0, #1"
		"mov x1, x19"
		"mov x2, #1"
		"svc #0"
	end end
end

version File
	const FILE_READ  1
	const FILE_WRITE 2

	const SEEK_SET   0
	const SEEK_CUR   1
	const SEEK_END   2

	const __linux_O_RDONLY 0
	const __linux_O_WRONLY 1
	const __linux_O_RDWR   2
	const __linux_O_CREAT  64
	const __linux_AT_FDCWD -100

	const __linux_default_mode 0o666

	struct File
		cell fd
	end

	let File stdin
	let File stdout
	let File stderr
	0 &stdin !
	1 &stdout !
	2 &stderr !

	func open_file begin
		let addr path
		let cell mode
		-> mode
		-> path

		let array 4096 u8 pathBuf

		path Array.elements + @
		&pathBuf
		path @
		__arm64_memcpy

		let cell flags

		if FILE_READ FILE_WRITE or mode = then
			__linux_O_RDWR __linux_O_CREAT or -> flags
		elseif FILE_READ mode = then
			__linux_O_RDONLY -> flags
		elseif FILE_WRITE mode = then
			__linux_O_WRONLY __linux_O_CREAT or -> flags
		end

		__linux_AT_FDCWD
		&pathBuf
		flags
		__linux_default_mode

		__arm64_pop_x3
		__arm64_pop_x2
		__arm64_pop_x1
		__arm64_pop_x0
		asm
			"mov x8, #56" # openat syscall
			"svc #0"
		end
		__arm64_push_x0
	end

	func close_file begin
		@ __arm64_pop_x0 # FD
		asm
			"mov x8, #57" # Close
			"svc #0"
		end
	end

	func file< begin
		!
	end

	func file@ begin
		__arm64_pop_x2   # Length
		__arm64_pop_x1   # Buffer
		@ __arm64_pop_x0 # Fd

		asm
			"mov x8, #63" # read
			"svc #0"
		end
	end

	func file! begin
		__arm64_pop_x2   # Length
		__arm64_pop_x1   # Buffer
		@ __arm64_pop_x0 # Fd

		asm
			"mov x8, #64" # write
			"svc #0"
		end

		__arm64_push_x0
	end

	func file_seek begin
		__arm64_pop_x2   # Whence
		__arm64_pop_x1   # Offset
		@ __arm64_pop_x0 # Fd

		asm
			"mov x8, #62" # lseek
			"svc #0"
		end
	end

	func file_peek begin
		@ __arm64_pop_x0
		asm
			"mov x1, #0"
			"mov x2, #1" # SEEK_CUR
			"mov x8, #62" # lseek
			"svc #0"
		end
		__arm64_push_x0
	end
end

version Args
	func core_get_arg begin
		8 * __linux_argv + @
	end

	inline core_get_arg_length begin __linux_argc end
end

version Time
	struct __linux_timeval
		cell sec
		cell usec
	end

	func get_epoch_time begin
		let __linux_timeval tv
		&tv
		__arm64_pop_x0
		asm
			"mov x8, #169" # gettimeofday
			"mov x1, #0"
			"svc #0"
		end
		&tv @
	end
end

version Heap
	version LibC
		extern C addr malloc usize end
		extern C void free addr end
	end

	version not LibC
		const __linux_PROT_READ     1
		const __linux_PROT_WRITE    2
		const __linux_MAP_PRIVATE   2
		const __linux_MAP_ANONYMOUS 32
		const __linux_MREMAP_MAYMOVE 1
		const __linux_MREMAP_FIXED   2

		func __linux_mmap begin
			__arm64_pop_x5 # pgoff
			__arm64_pop_x4 # fd
			__arm64_pop_x3 # flags
			__arm64_pop_x2 # prot
			__arm64_pop_x1 # len
			__arm64_pop_x0 # addr

			asm
				"mov x8, #222" # mmap syscall
				"svc #0"
			end

			__arm64_push_x0
		end

		func malloc begin
			let cell sz
			-> sz

			0 sz 8 + __linux_PROT_READ __linux_PROT_WRITE or
			__linux_MAP_PRIVATE __linux_MAP_ANONYMOUS or -1 0 __linux_mmap

			dup sz swap ! # write size
			8 +
		end

		func __linux_mremap begin
			__arm64_pop_x4 # new_addr
			__arm64_pop_x3 # flags
			__arm64_pop_x2 # new_len
			__arm64_pop_x1 # old_len
			__arm64_pop_x0 # addr

			asm
				"mov x8, #216" # mremap syscall
				"svc #0"
			end

			__arm64_push_x0
		end

		func realloc begin
			let addr ptr
			let usize sz
			8 + -> sz
			8 - -> ptr

			let usize oldSz
			ptr @ 8 + -> oldSz

			let addr ptr2
			sz malloc 8 - -> ptr2

			ptr2 oldSz sz __linux_MREMAP_MAYMOVE __linux_MREMAP_FIXED or ptr __linux_mremap
		end

		func __linux_munmap begin
			__arm64_pop_x1 # length
			__arm64_pop_x0 # addr

			asm
				"mov x8, #215" # munmap syscall
				"svc #0"
			end

			__arm64_push_x0
		end

		func free begin
			dup 8 - @ swap 8 - swap 8 + __linux_munmap drop
		end
	end
end

version Exit
	func exit begin
		asm
			"ldr x0, [x19, #-8]!"
			"mov x8, #93"
			"svc #0"
		end
	end
end
