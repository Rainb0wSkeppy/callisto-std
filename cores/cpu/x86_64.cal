inline man unsafe __x86_64_pop_rdi cell v begin asm
	"sub r15, 8"
	"mov rdi, [r15]"
end end

inline man unsafe __x86_64_pop_rsi cell v begin asm
	"sub r15, 8"
	"mov rsi, [r15]"
end end

inline man unsafe __x86_64_pop_rax cell v begin asm
	"sub r15, 8"
	"mov rax, [r15]"
end end

inline man unsafe __x86_64_pop_rbx cell v begin asm
	"sub r15, 8"
	"mov rbx, [r15]"
end end

inline man unsafe __x86_64_pop_rcx cell v begin asm
	"sub r15, 8"
	"mov rcx, [r15]"
end end

inline man unsafe __x86_64_pop_rdx cell v begin asm
	"sub r15, 8"
	"mov rdx, [r15]"
end end

inline man unsafe __x86_64_pop_r10 cell v begin asm
	"sub r15, 8"
	"mov r10, [r15]"
end end

inline man unsafe __x86_64_pop_r9 cell v begin asm
	"sub r15, 8"
	"mov r9, [r15]"
end end

inline man unsafe __x86_64_pop_r8 cell v begin asm
	"sub r15, 8"
	"mov r8, [r15]"
end end

inline man unsafe __x86_64_push_rax -> cell v begin asm
	"mov [r15], rax"
	"add r15, 8"
end end

inline man unsafe __x86_64_push_rbx -> cell v begin asm
	"mov [r15], rbx"
	"add r15, 8"
end end

inline man unsafe __x86_64_push_rdx -> cell v begin asm
	"mov [r15], rdx"
	"add r15, 8"
end end

func man unsafe = cell a cell b -> cell res begin
	__x86_64_pop_rbx
	__x86_64_pop_rax
	asm
		"cmp rax, rbx"
		"je .push_1"
		"mov qword [r15], 0"
		"add r15, 8"
		"ret"
		".push_1:"
		"mov qword [r15], 0xFFFFFFFFFFFFFFFF"
		"add r15, 8"
	end
end

func man unsafe > cell a cell b -> cell res begin
	__x86_64_pop_rbx
	__x86_64_pop_rax
	asm
		"cmp rax, rbx"
		"jg .push_1"
		"mov qword [r15], 0"
		"add r15, 8"
		"ret"
		".push_1:"
		"mov qword [r15], 0xFFFFFFFFFFFFFFFF"
		"add r15, 8"
	end
end

func man unsafe >= cell a cell b -> cell res begin
	__x86_64_pop_rbx
	__x86_64_pop_rax
	asm
		"cmp rax, rbx"
		"jge .push_1"
		"mov qword [r15], 0"
		"add r15, 8"
		"ret"
		".push_1:"
		"mov qword [r15], 0xFFFFFFFFFFFFFFFF"
		"add r15, 8"
	end
end

func man unsafe < cell a cell b -> cell res begin
	__x86_64_pop_rbx
	__x86_64_pop_rax
	asm
		"cmp rax, rbx"
		"jl .push_1"
		"mov qword [r15], 0"
		"add r15, 8"
		"ret"
		".push_1:"
		"mov qword [r15], 0xFFFFFFFFFFFFFFFF"
		"add r15, 8"
	end
end

func man unsafe <= cell a cell b -> cell res begin
	__x86_64_pop_rbx
	__x86_64_pop_rax
	asm
		"cmp rax, rbx"
		"jle .push_1"
		"mov qword [r15], 0"
		"add r15, 8"
		"ret"
		".push_1:"
		"mov qword [r15], 0xFFFFFFFFFFFFFFFF"
		"add r15, 8"
	end
end

inline man unsafe @ addr address -> cell v begin
	__x86_64_pop_rbx
	asm
		"mov rax, [rbx]"
	end
	__x86_64_push_rax
end

inline man unsafe ! cell value addr address begin
	__x86_64_pop_rbx
	__x86_64_pop_rax
	asm
		"mov [rbx], rax"
	end
end

inline man unsafe b@ addr address -> cell v begin
	__x86_64_pop_rbx
	asm
		"xor rax, rax"
		"mov al, [rbx]"
	end
	__x86_64_push_rax
end

inline man unsafe b! cell value addr address begin
	__x86_64_pop_rbx
	__x86_64_pop_rax
	asm
		"mov [rbx], al"
	end
end

inline man unsafe w@ addr address -> cell v begin
	__x86_64_pop_rbx
	asm
		"xor rax, rax"
		"mov ax, [rbx]"
	end
	__x86_64_push_rax
end

inline man unsafe w! cell value addr address begin
	__x86_64_pop_rbx
	__x86_64_pop_rax
	asm
		"mov [rbx], ax"
	end
end

inline man unsafe d@ addr address -> cell v begin
	__x86_64_pop_rbx
	asm
		"xor rax, rax"
		"mov eax, [rbx]"
	end
	__x86_64_push_rax
end

inline man unsafe d! cell value addr address begin
	__x86_64_pop_rbx
	__x86_64_pop_rax
	asm
		"mov [rbx], eax"
	end
end

inline man unsafe dup cell a -> cell a cell a begin
	__x86_64_pop_rax
	__x86_64_push_rax
	__x86_64_push_rax
end

inline man unsafe drop cell a begin asm
	"sub r15, 8"
end end

inline man unsafe swap cell a cell b -> cell b cell a begin
	__x86_64_pop_rbx
	__x86_64_pop_rax
	__x86_64_push_rbx
	__x86_64_push_rax
end

inline man unsafe + cell a cell b -> cell res begin
	__x86_64_pop_rbx
	__x86_64_pop_rax
	asm
		"add rax, rbx"
	end
	__x86_64_push_rax
end

inline man unsafe s+ cell a cell b -> cell res begin + end

inline man unsafe - cell a cell b -> cell res begin
	__x86_64_pop_rbx
	__x86_64_pop_rax
	asm
		"sub rax, rbx"
	end
	__x86_64_push_rax
end

inline man unsafe s- cell a cell b -> cell res begin - end

inline man unsafe * cell a cell b -> cell res begin
	__x86_64_pop_rbx
	__x86_64_pop_rax
	asm
		"mul rbx"
	end
	__x86_64_push_rax
end

inline man unsafe s* cell a cell b -> cell res begin
	__x86_64_pop_rbx
	__x86_64_pop_rax
	asm
		"imul rbx"
	end
	__x86_64_push_rax
end

inline man unsafe / cell a cell b -> cell res begin
	__x86_64_pop_rbx
	__x86_64_pop_rax
	asm
		"xor rdx, rdx"
		"div rbx"
	end
	__x86_64_push_rax
end

inline man unsafe s/ cell a cell b -> cell res begin
	__x86_64_pop_rbx
	__x86_64_pop_rax
	asm
		"xor rdx, rdx"
		"idiv rbx"
	end
	__x86_64_push_rax
end

inline man unsafe % cell a cell b -> cell res begin
	__x86_64_pop_rbx
	__x86_64_pop_rax
	asm
		"xor rdx, rdx"
		"div rbx"
	end
	__x86_64_push_rdx
end

inline man unsafe s% cell a cell b -> cell res begin
	__x86_64_pop_rbx
	__x86_64_pop_rax
	asm
		"xor rdx, rdx"
		"idiv rbx"
	end
	__x86_64_push_rdx
end

inline man unsafe and cell a cell b -> cell res begin
	__x86_64_pop_rbx
	__x86_64_pop_rax
	asm
		"and rax, rbx"
	end
	__x86_64_push_rax
end

inline man unsafe or cell a cell b -> cell res begin
	__x86_64_pop_rbx
	__x86_64_pop_rax
	asm
		"or rax, rbx"
	end
	__x86_64_push_rax
end

inline man unsafe xor cell a cell b -> cell res begin
	__x86_64_pop_rbx
	__x86_64_pop_rax
	asm
		"xor rax, rbx"
	end
	__x86_64_push_rax
end

inline man unsafe not cell v -> cell !v begin
	__x86_64_pop_rax
	asm
		"not rax"
	end
	__x86_64_push_rax
end

inline man unsafe << cell value cell by -> cell res begin
	__x86_64_pop_rcx
	__x86_64_pop_rax
	asm
		"shl rax, cl"
	end
	__x86_64_push_rax
end

inline man unsafe >> cell value cell by -> cell res begin
	__x86_64_pop_rcx
	__x86_64_pop_rax
	asm
		"shr rax, cl"
	end
	__x86_64_push_rax
end
