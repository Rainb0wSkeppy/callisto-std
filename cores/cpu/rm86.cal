inline man unsafe __rm86_pop_ax cell v begin asm
	"sub si, 2"
	"mov ax, [si]"
end end

inline man unsafe __rm86_pop_bx cell v begin asm
	"sub si, 2"
	"mov bx, [si]"
end end

inline man unsafe __rm86_pop_di cell v begin asm
	"sub si, 2"
	"mov di, [si]"
end end

inline man unsafe __rm86_pop_dx cell v begin asm
	"sub si, 2"
	"mov dx, [si]"
end end

inline man unsafe __rm86_pop_cx cell v begin asm
	"sub si, 2"
	"mov cx, [si]"
end end

inline man unsafe __rm86_push_ax -> cell reg begin asm
	"mov [si], ax"
	"add si, 2"
end end

inline man unsafe __rm86_push_bx -> cell reg begin asm
	"mov [si], bx"
	"add si, 2"
end end

inline man unsafe __rm86_push_dx -> cell reg begin asm
	"mov [si], dx"
	"add si, 2"
end end

version IO
	func man unsafe print_ch cell char begin
		__rm86_pop_ax
		asm
			"mov ah, 0x0E"
			"int 0x10"
		end
	end
end

func man unsafe = cell a cell b -> cell res begin
	__rm86_pop_ax
	__rm86_pop_bx
	asm
		"cmp ax, bx"
		"je .push_1"
		"mov word [si], 0"
		"add si, 2"
		"ret"
		".push_1:"
		"mov word [si], 0xFFFF"
		"add si, 2"
	end
end

func man unsafe > cell a cell b -> cell res begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"cmp ax, bx"
		"jg .push_1"
		"mov word [si], 0"
		"add si, 2"
		"ret"
		".push_1:"
		"mov word [si], 0xFFFF"
		"add si, 2"
	end
end

func man unsafe >= cell a cell b -> cell res begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"cmp ax, bx"
		"jge .push_1"
		"mov word [si], 0"
		"add si, 2"
		"ret"
		".push_1:"
		"mov word [si], 0xFFFF"
		"add si, 2"
	end
end

func man unsafe < cell a cell b -> cell res begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"cmp ax, bx"
		"jl .push_1"
		"mov word [si], 0"
		"add si, 2"
		"ret"
		".push_1:"
		"mov word [si], 0xFFFF"
		"add si, 2"
	end
end

func man unsafe <= cell a cell b -> cell res begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"cmp ax, bx"
		"jle .push_1"
		"mov word [si], 0"
		"add si, 2"
		"ret"
		".push_1:"
		"mov word [si], 0xFFFF"
		"add si, 2"
	end
end

inline man unsafe @ addr address -> cell v begin
	__rm86_pop_bx
	asm
		"mov ax, [bx]"
	end
	__rm86_push_ax
end

inline man unsafe ! cell v addr address begin
	__rm86_pop_di
	__rm86_pop_bx
	asm
		"mov [di], bx"
	end
end

inline man unsafe b@ addr address -> cell v begin
	__rm86_pop_bx
	asm
		"xor ah, ah"
		"mov al, [bx]"
	end
	__rm86_push_ax
end

inline man unsafe b! cell v addr address begin
	__rm86_pop_di
	__rm86_pop_bx
	asm
		"mov [di], bl"
	end
end

inline man unsafe w@ addr address -> cell v begin
	__rm86_pop_bx
	asm
		"mov ax, [bx]"
	end
	__rm86_push_ax
end

inline man unsafe w! cell v addr address begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"mov [bx], ax"
	end
end

inline man unsafe dup cell v -> cell v cell v begin
	__rm86_pop_ax
	__rm86_push_ax
	__rm86_push_ax
end

inline man unsafe drop cell v begin asm
	"sub si, 2"
end end

inline man unsafe swap cell a cell b -> cell b cell a begin
	__rm86_pop_bx
	__rm86_pop_ax
	__rm86_push_bx
	__rm86_push_ax
end

inline man unsafe + cell a cell b -> cell res begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"add ax, bx"
	end
	__rm86_push_ax
end

inline man unsafe s+ cell a cell b -> cell res begin + end

inline man unsafe - cell a cell b -> cell res begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"sub ax, bx"
	end
	__rm86_push_ax
end

inline man unsafe s- cell a cell b -> cell res begin - end

inline man unsafe * cell a cell b -> cell res begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"mul bx"
	end
	__rm86_push_ax
end

inline man unsafe s* cell a cell b -> cell res begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"imul bx"
	end
	__rm86_push_ax
end

inline man unsafe / cell a cell b -> cell res begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"xor dx, dx"
		"div bx"
	end
	__rm86_push_ax
end

inline man unsafe s/ cell a cell b -> cell res begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"cwd"
		"idiv bx"
	end
	__rm86_push_ax
end

inline man unsafe % cell a cell b -> cell res begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"xor dx, dx"
		"div bx"
	end
	__rm86_push_dx
end

inline man unsafe s% cell a cell b -> cell res begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"xor dx, dx"
		"idiv bx"
	end
	__rm86_push_dx
end

inline man unsafe and cell a cell b -> cell res begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"and ax, bx"
	end
	__rm86_push_ax
end

inline man unsafe or cell a cell b -> cell res begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"or ax, bx"
	end
	__rm86_push_ax
end

inline man unsafe xor cell a cell b -> cell res begin
	__rm86_pop_bx
	__rm86_pop_ax
	asm
		"xor ax, bx"
	end
	__rm86_push_ax
end

inline man unsafe not cell v -> cell !v begin
	__rm86_pop_ax
	asm
		"not ax"
	end
	__rm86_push_ax
end

inline man unsafe << cell v cell by -> cell res begin
	__rm86_pop_cx
	__rm86_pop_ax
	asm
		"shl ax, cl"
	end
	__rm86_push_ax
end

inline man unsafe >> cell v cell by -> cell res begin
	__rm86_pop_cx
	__rm86_pop_ax
	asm
		"shr ax, cl"
	end
	__rm86_push_ax
end
