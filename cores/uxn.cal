enable IO
enable Exit
enable Args
restrict IO
restrict File
restrict Args
restrict Time
restrict Heap
restrict Exit

## Supported features: IO, Exit
##
## Cell size = 16 bits

version Args



end

const __uxn_NO_QUEUE  0
const __uxn_STDIN     1
const __uxn_ARGUMENT  2
const __uxn_ARG_SPACE 3
const __uxn_ARG_END   4

version IO
	inline man unsafe printch cell ch begin asm
		".Console/write DEO POP"
	end end	
end

version Exit
	inline man unsafe exit cell ret begin asm
		"NIP #80 ORA .System/state DEO BRK"
	end end
end

func man unsafe = cell a cell b -> cell ? begin asm
	"EQU2"
	",&true JCN"
	"#0000 JMP2r"
	"&true"
	"#ffff JMP2r"
end end

func man unsafe > cell a cell b -> cell ? begin asm
	"GTH2"
	",&true JCN"
	"#0000 JMP2r"
	"&true"
	"#ffff JMP2r"
end end

func man unsafe >= cell a cell b -> cell ? begin asm
	"GTH2k STH EQU2 STHr ORA ,&true JCN"
	"#0000 JMP2r"
	"&true"
	"#ffff JMP2r"
end end

func man unsafe < cell a cell b -> cell ? begin asm
	"LTH2"
	",&true JCN"
	"#0000 JMP2r"
	"&true"
	"#ffff JMP2r"
end end

func man unsafe <= cell a cell b -> cell ? begin asm
	"LTH2k STH EQU2 STHr ORA ,&true JCN"
	"#0000 JMP2r"
	"&true"
	"#ffff JMP2r"
end end

inline man unsafe @ addr address -> cell value begin asm
	"LDA2"
end end

inline man unsafe ! cell value cell address begin asm
	"STA2"
end end

inline man unsafe b@ addr address -> u8 byte begin asm
	"LDA #00 SWP"
end end

inline man unsafe b! cell value addr address begin asm
	"STH2 NIP STH2r STA"
end end

inline man unsafe w@ addr address -> cell value begin @ end
inline man unsafe w! cell value addr address begin ! end

inline man unsafe dup cell v -> cell v1 cell v2 begin asm
	"DUP2"
end end

inline man unsafe drop cell v begin asm
	"POP2"
end end

inline man unsafe swap cell a cell b -> cell b cell a begin asm
	"SWP2"
end end

inline man unsafe + cell a cell b -> cell res begin asm
	"ADD2"
end end

inline man unsafe - cell a cell b -> cell res begin asm
	"SUB2"
end end

inline man unsafe * cell a cell b -> cell res begin asm
	"MUL2"
end end

inline man unsafe / cell a cell b -> cell res begin asm
	"DIV2"
end end

inline man unsafe % cell a cell b -> cell res begin asm
	"DIV2k MUL2 SUB2"
end end

inline man unsafe and cell a cell b -> cell res begin asm
	"AND2"
end end

inline man unsafe or cell a cell b -> cell res begin asm
	"ORA2"
end end

inline man unsafe xor cell a cell b -> cell res begin asm
	"EOR2"
end end

inline man unsafe not cell a -> cell !a begin asm
	"#ffff EOR2"
end end

inline man unsafe << cell v cell by -> cell res begin asm
	"#40 SFT2 NIP SFT2"
end end

inline man unsafe >> cell v cell by -> cell res begin asm
	"NIP SFT2"
end end

version IO version Exit
	func __core_a@ cell offset addr arr -> cell value begin
		arr Array.memberSize + @ offset * -> offset
		arr Array.elements + @ offset +

		if arr Array.memberSize + @ 1 = then
			b@
		elseif arr Array.memberSize + @ 2 = then
			version 16Bit
				w@
			end
			version not 16Bit
				# TODO!!!
			end
		elseif arr Array.memberSize + @ 4 = then
			version 32Bit
				d@
			end
			version not 32Bit
				# TODO!!!
			end
		else
			@
		end
	end

	func __core_printstr addr arr begin
		let usize length
		let usize i

		arr @ -> length

		while i length < do
			i arr __core_a@ printch
			i 1 + -> i
		end
	end

	inline man unsafe __core_new_line begin
		13 printch 10 printch
	end

	func __uxn_exception begin
		c"Unhandled exception: " __core_printstr
		&_cal_exception Exception.msg + __core_printstr __core_new_line
		1 exit
	end
end end

version Args
	let addr __uxn_heap
	let addr __uxn_argv
	let cell __uxn_argc

	inline unsafe __uxn_console_type -> cell type begin asm
		".Console/type DEI #00 SWP"
	end end

	inline unsafe __uxn_console_read -> cell type begin asm
		".Console/read DEI #00 SWP"
	end end

	func __uxn_console_vector begin
		if __uxn_console_type __uxn_ARGUMENT = then
			__uxn_console_read __uxn_heap b!
			__uxn_heap 1 + -> __uxn_heap
		elseif __uxn_console_type __uxn_ARG_SPACE = then
			0 __uxn_heap b!
			__uxn_heap 1 + -> __uxn_heap
			__uxn_argc 1 + -> __uxn_argc
		elseif __uxn_console_type __uxn_ARG_END = then
			0 __uxn_heap b!
			__uxn_heap 1 + -> __uxn_heap
			__uxn_argc 1 + -> __uxn_argc

			unsafe begin asm
				"!calmain"
			end end
		end
	end

	inline __uxn_program_init begin
		unsafe begin
			asm ";program_end" end -> __uxn_heap
		end

		__uxn_heap -> __uxn_argv

		0 __uxn_heap b!
		__uxn_heap 1 + -> __uxn_heap

		1 -> __uxn_argc

		if __uxn_console_type __uxn_NO_QUEUE = then
			unsafe begin asm
				"!calmain"
			end end
		else
			# set console vector
			&__uxn_console_vector
			unsafe cell function begin asm
				".Console/vector DEO2"
			end end
		end
	end

	func man error core_get_arg cell which -> addr str begin
		let cell which
		let cell counter
		let addr args
		dup -> which
		-> counter
		__uxn_argv -> args

		if which __uxn_argc > then
			c"core_get_arg out of bounds" throw
		end

		if which 0 = then args return end

		while true do
			if args b@ 0 = then
				0 args b! # what?
				counter 1 - -> counter

				if counter 0 = then args 1 + return end
			end

			args 1 + -> args
		end
	end

	inline core_get_arg_length -> cell argc begin __uxn_argc end
end

version not Args
	inline unsafe __uxn_program_init begin asm
		"!calmain"
	end end
end

inline unsafe __uxn_program_exit begin asm
	"#80 .System/state DEO BRK"
end end
