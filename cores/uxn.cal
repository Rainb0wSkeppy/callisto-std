## Supported features: IO, Exit
##
## Cell size = 16 bits

version IO
	inline printch begin asm
		"NIP .Console/write DEO"
	end end	
end

version Exit
	inline exit begin asm
		"BRK"
	end end
end

func = begin asm
	"EQU2"
	",&true JCN"
	"#0000 JMP2r"
	"&true"
	"#ffff JMP2r"
end end

func > begin asm
	"GTH2"
	",&true JCN"
	"#0000 JMP2r"
	"&true"
	"#ffff JMP2r"
end end

func >= begin asm
	"GTH2k STH EQU2 STHr ORA ,&true JCN"
	"#0000 JMP2r"
	"&true"
	"#ffff JMP2r"
end end

func < begin asm
	"LTH2"
	",&true JCN"
	"#0000 JMP2r"
	"&true"
	"#ffff JMP2r"
end end

func <= begin asm
	"LTH2k STH EQU2 STHr ORA ,&true JCN"
	"#0000 JMP2r"
	"&true"
	"#ffff JMP2r"
end end

inline @ begin asm
	"LDA2"
end end

inline ! begin asm
	"STA2"
end end

inline b@ begin asm
	"LDA #00 SWP"
end end

inline b! begin asm
	"STH2 NIP STH2r STA"
end end

inline w@ begin @ end
inline w! begin ! end

inline dup begin asm
	"DUP2"
end end

inline drop begin asm
	"POP2"
end end

inline swap begin asm
	"SWP2"
end end

inline + begin asm
	"ADD2"
end end

inline - begin asm
	"SUB2"
end end

inline * begin asm
	"MUL2"
end end

inline / begin asm
	"DIV2"
end end

inline % begin asm
	"DIV2k MUL2 SUB2"
end end

inline and begin asm
	"AND2"
end end

inline or begin asm
	"ORA2"
end end

inline xor begin asm
	"EOR2"
end end

inline not begin asm
	"#ffff EOR2"
end end

inline << begin asm
	"#40 SFT2 NIP SFT2"
end end

inline >> begin asm
	"NIP SFT2"
end end

version IO version Exit
	func __core_a@ cell offset addr arr begin
		arr Array.memberSize + @ offset * -> offset
		arr Array.elements + @ offset +

		if arr Array.memberSize + @ 1 = then
			b@
		elseif arr Array.memberSize + @ 2 = then
			version 16Bit
				w@
			end
			version not 16Bit
				# TODO!!!
			end
		elseif arr Array.memberSize + @ 4 = then
			version 32Bit
				d@
			end
			version not 32Bit
				# TODO!!!
			end
		else
			@
		end
	end

	func __core_printstr addr arr begin
		let usize length
		let usize i

		arr @ -> length

		while i length < do
			i arr __core_a@ printch
			i 1 + -> i
		end
	end

	inline __core_new_line begin
		13 printch 10 printch
	end

	func __uxn_exception begin
		c"Unhandled exception: " __core_printstr
		&_cal_exception Exception.msg + __core_printstr __core_new_line
		1 exit
	end
end end
