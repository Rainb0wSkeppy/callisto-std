requires IO

include "array.cal"

func man printdec_loop cell num begin
	if dup then
		dup 10 / printdec_loop
		10 % 48 + printch
	else
		drop
	end
end

## ## printdec
## Parameters: cell value
##
## Prints the given value as decimal to stdout
func man printdec cell value begin
	if dup then
		printdec_loop
	else
		drop 48 printch
	end
end

func man printhex_loop cell num begin
	if dup then
		dup 16 / printhex_loop
		16 %
		if dup 9 <= then
			48 + printch
		else
			55 + printch
		end
	else
		drop
	end
end

## ## printhex
## Parameters: cell value
##
## Prints the given value as hexadecimal to stdout
func man printhex cell num begin
	if dup then
		printhex_loop
	else
		drop 48 printch
	end
end

## ## printstr
## Parameters: Array* str
##
## Prints the given string to stdout
func printstr ptr Array arr begin
	let usize i

	while i arr.length < do
		i arr a@ printch
		i 1 + -> i
	end
end

## ## new_line
## Parameters:
##
## Prints a new line to stdout
func new_line begin
	'\r' printch '\n' printch
end

# Removed until I add a way to get this to work in safe callisto
# ## ## printf
# ## Parameters: ..., Array* fmt
# ##
# ## Prints a formatted string (`fmt`) to stdout, format values are in reverse order of
# ## how they are written
# ##
# ## Formats:
# ##
# ## - `%s` - String (`Array*`)
# ## - `%d` - Decimal (`cell`)
# ## - `%X` - Hexadecimal (`cell`)
#func printf addr fmt begin
#	let cell i
#	let cell ch

#	while i fmt @ < do
#		if i fmt a@ '%' = then
#			i 1 + -> i
#			i fmt a@ -> ch

#			if ch 's' = then
#				printstr
#			elseif ch 'd' = then
#				printdec
#			elseif ch 'X' = then
#				printhex
#			end
#		else
#			i fmt a@ printch
#		end
#
#		i 1 + -> i
#	end
#end
