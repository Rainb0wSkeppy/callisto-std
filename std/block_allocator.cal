include "std/allocator.cal"
include "std/ops.cal"

## ## struct BlockAllocator
## Members:
## 
## `usize block_size`
## `usize block_count`
## `addr  allocated_blocks`
## `addr  buffer`
struct BlockAllocator : Allocator
	usize block_size
	usize block_count
	addr  allocated_blocks
	addr  buffer
end

func error _block_allocator_alloc ptr Allocator allocator usize sz -> addr address begin
	if allocator.block_count 0 = then
		c"Block allocator has not been initialized" throw
	end
	
	if sz allocator.block_size > then
		c"Requested memory can't fit in a single block" throw
	end
	
	let cell i 0 -> i
	while i allocator.block_count < do
		allocator.buffer i 8 / + b@
		if dup i 8 % >> 0 = then
			1 i 8 % << or allocator.buffer i 8 / + b!
			i allocator.block_size * allocator.buffer + return
		end
		drop
		i ++ -> i
	end
	
	c"Out of memory" throw
end

func error _block_allocator_free ptr Allocator allocator addr address begin
	if allocator.block_count 0 = then
		c"Block allocator has not been initialized" throw
	end
	address allocator.buffer -
	if dup allocator.block_size % 0 = not then
		c"Attempted to free memory that wasn't allocated with this block allocator" throw
	end
	
	allocator.block_size /
	if dup 0 allocator.block_count -- in_range then
		c"Attempted to free memory that wasn't allocated with this block allocator" throw
	end
	
	let cell block_index -> block_index
	allocator.buffer block_index 8 / + b@
	if dup block_index 8 % >> 1 and 0 = then
		c"Attempted to free memory that wasn't allocated with this block allocator" throw
	end
	
	1 block_index 8 % << or
	block_index allocator.block_size * allocator.buffer +
end

func error _block_allocator_realloc ptr Allocator allocator addr address usize sz -> addr address begin
	if allocator.block_count 0 = then
		c"Block allocator has not been initialized" throw
	end
	
	if sz allocator.block_size > then
		c"Requested memory can't fit in a single block" throw
	end
	
	if sz 0 = then allocator address _block_allocator_free 0 return end
	if address 0 = then allocator sz _block_allocator_alloc return end
	
	address
end

implement BlockAllocator init
	let ptr BlockAllocator allocator
	-> allocator
	
	&_block_allocator_alloc   -> allocator.alloc
	&_block_allocator_realloc -> allocator.realloc
	&_block_allocator_free    -> allocator.free
	
	0 -> allocator.block_size
	0 -> allocator.block_count
	0 -> allocator.allocated_blocks
	0 -> allocator.buffer
end

## ## block_allocator_init
## Parameters: `ptr BlockAllocator allocator, usize block_size, usize block_count, addr allocated_blocks, addr buffer`
##
## Initializes a block allocator
## allocated_blocks points to ceil(block_count / 8) bytes of memory to keep track of blocks that have been allocated
## buffer points to block_size * block_count bytes of memory
func block_allocator_init ptr BlockAllocator allocator usize block_size usize block_count addr allocated_blocks addr buffer begin
	block_size       -> allocator.block_size
	block_count      -> allocator.block_count
	allocated_blocks -> allocator.allocated_blocks
	buffer           -> allocator.buffer
	
	allocated_blocks block_count 7 + 8 / 0 fill_mem
end
