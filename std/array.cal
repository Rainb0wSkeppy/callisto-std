## ## a<
## Parameters: Array* src, Array* var
##
## Takes an array from the stack and writes it to the given variable
func a< ptr Array src ptr Array var begin
	src.length -> var.length
	src.memberSize -> var.memberSize
	src.elements -> var.elements
end

## ## create_array
## Parameters: usize length, usize memberSize, addr elements, Array* dest
##
## Writes the Array fields to `dest`
func man create_array usize length usize memberSize addr elements ptr Array dest begin
	let ptr Array dest
	-> dest
	-> dest.elements
	-> dest.memberSize
	-> dest.length
end

## ## a^
## Parameters: cell offset, Array* array
##
## Returns &array[offset]
func error a^ cell offset ptr Array arr -> addr address begin
	if offset arr.length >= then
		c"a^: Index out of bounds" throw
	end

	arr.elements offset arr.memberSize * +
end

## ## a@
## Parameters: cell offset, Array* array
##
## Returns array[offset]
##
## Supports all integer sizes
func error a@ cell offset ptr Array arr -> cell value begin
	if offset arr.length >= then
		c"a@: Index out of bounds" throw
	end

	arr.memberSize offset * -> offset
	arr.elements offset +

	version CallistoScript
		if arr.memberSize 1 = then
			@
		else
			return # TODO!!!
		end
	end

	version not CallistoScript
		if arr.memberSize 1 = then
			b@
		elseif arr.memberSize 2 = then
			version 16Bit
				w@
			end
			version not 16Bit
				c"a@: Can't read 16-bit values from array" throw
			end
		elseif arr.memberSize 4 = then
			version 32Bit
				d@
			end
			version not 32Bit
				c"a@: Can't read 32-bit values from array" throw
			end
		else
			@
		end
	end
end

## ## a!
## Parameters: cell value, cell offset, Array* array
##
## Writes value to array[offset]
##
## Currently supports 8-bit and cell size elements (more sizes will be added in the future)
func error man a! cell value usize offset ptr Array arr begin
	let ptr Array arr
	let usize     offset

	-> arr
	-> offset

	if offset arr.length >= then
		c"a!: Index out of bounds" throw
	end

	arr.memberSize offset * -> offset
	arr.elements offset +

	version CallistoScript
		if arr.memberSize 1 = then
			!
		else
			drop drop
			c"a!: Can't write values that are bigger than cells to an array" throw
		end
	end

	version not CallistoScript
		if arr.memberSize 1 = then
			b!
		elseif arr.memberSize 2 = then
			version 16Bit
				w!
			end
			version not 16Bit
				drop drop
				c"a!: Can't write 16 bit values to array" throw
			end
		elseif arr.memberSize 4 = then
			version 32Bit
				d!
			end
			version not 32Bit
				drop drop
				c"a!: Can't write 32 bit values to array" throw
			end
		else
			!
		end
	end
end

## ## a!from
## Parameters addr address, cell offset, ptr Array array
##
## Writes the dereferenced value of `address` to array[offset]
func a!from addr address cell offset ptr Array arr begin

end

## ## a=
## Parameters: Array* arr1, Array* arr2
##
## Returns true if the arrays are equal, false if not (will soon be changed to max cell value
## if true)
func a= ptr Array arr1 ptr Array arr2 -> cell equal begin
	if arr1.length arr2.length = not then
		false return
	end

	let cell i

	while i arr1.length < do
		if i arr1 a@ i arr2 a@ = not then
			false return
		end

		i 1 + -> i
	end

	true
end

## ## a..
## Parameters: cell start, cell length, ptr Array array, ptr Array ret
##
## Sets `ret` to a slice of `array`, starting at `start` and is `length` in size
func error a.. cell start cell length ptr Array arr ptr Array ret begin
	if start length + arr.length >= then
		"a..: Out of bounds array slice" throw
	end

	length -> ret.length
	arr.memberSize -> ret.memberSize
	start arr a^ -> ret.elements
end
