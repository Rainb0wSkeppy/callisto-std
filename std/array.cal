## ## a<
## Parameters: Array* src, Array* var
##
## Takes an array from the stack and writes it to the given variable
func a< addr src addr var begin
	src @ var !
	src Array.memberSize + @ var Array.memberSize + !
	src Array.elements + @ var Array.elements + !
end

## ## create_array
## Parameters: usize length, usize memberSize, addr elements, Array* dest
##
## Writes the Array fields to `dest`
func man create_array usize length usize memberSize addr elements addr dest begin
	let addr var
	-> var
	var Array.elements + !
	var Array.memberSize + !
	var !
end

## ## a@
## Parameters: cell offset, Array* array
##
## Returns array[offset]
##
## Currently supports 8-bit and cell size elements (more sizes will be added in the future)
func a@ cell offset addr arr -> cell value begin
	arr Array.memberSize + @ offset * -> offset
	arr Array.elements + @ offset +

	version CallistoScript
		if arr Array.memberSize + @ 1 = then
			@
		else
			return # TODO!!!
		end
	end

	version not CallistoScript
		if arr Array.memberSize + @ 1 = then
			b@
		elseif arr Array.memberSize + @ 2 = then
			version 16Bit
				w@
			end
			version not 16Bit
				# TODO!!!
			end
		elseif arr Array.memberSize + @ 4 = then
			version 32Bit
				d@
			end
			version not 32Bit
				# TODO!!!
			end
		else
			@
		end
	end
end

## ## a!
## Parameters: cell value, cell offset, Array* array
##
## Writes value to array[offset]
##
## Currently supports 8-bit and cell size elements (more sizes will be added in the future)
func man a! cell value usize offset addr arr begin
	let addr  arr
	let usize offset

	-> arr
	-> offset

	arr Array.memberSize + @ offset * -> offset
	arr Array.elements + @ offset +

	version CallistoScript
		if arr Array.memberSize + @ 1 = then
			!
		else
			return # TODO!!!
		end
	end

	version not CallistoScript
		if arr Array.memberSize + @ 1 = then
			b!
		elseif arr Array.memberSize + @ 2 = then
			version 16Bit
				w!
			end
			version not 16Bit
				# TODO!!!
			end
		elseif arr Array.memberSize + @ 4 = then
			version 32Bit
				d!
			end
			version not 32Bit
				# TODO!!!
			end
		else
			!
		end
	end
end

## ## a=
## Parameters: Array* arr1, Array* arr2
##
## Returns true if the arrays are equal, false if not (will soon be changed to max cell value
## if true)
func a= addr arr1 addr arr2 -> cell equal begin
	if arr1 @ arr2 @ = not then
		0 return
	end

	let cell i

	while i arr1 @ < do
		if i arr1 a@ i arr2 a@ = not then
			false return
		end

		i 1 + -> i
	end

	true
end
